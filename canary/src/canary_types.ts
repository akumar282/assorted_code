// Autogenerated from the endpoints here: https://app.quicktype.io/

export type CanaryEmbeddedJson = {
	"@context": string;
	"@type": string;
	name: string;
	image: string;
	priceRange: string;
	telephone: string;
	address: Address;
	review?: ReviewEntity[] | null;
	aggregateRating: AggregateRating;
	servesCuisine: string;
};
export type Address = {
	streetAddress: string;
	addressLocality: string;
	addressCountry: string;
	addressRegion: string;
	postalCode: string;
};
export type ReviewEntity = {
	author: string;
	datePublished: string;
	reviewRating: ReviewRating;
	description: string;
};
export type ReviewRating = {
	ratingValue: number;
};
export type AggregateRating = {
	"@type": string;
	ratingValue: number;
	reviewCount: number;
};

export namespace FoodItems {
	export type FoodItem = {
		description: string;
		mediaItems: MediaItem[];
		name: string;
		price: string;
		reviewData: ReviewData | null;
		isDrink?: boolean;
	};

	export type MediaItem = {
		caption: string;
		id: string;
		timeUploaded: string;
		url: string;
		type: Type;
	};

	export type ReviewData = {
		reviewTotal: number;
		reviews: Review[];
	};

	export type Review = {
		userDisplayName: string;
		userPhotoUrl: string;
		userFriendCount: number;
		userReviewCount: number;
		rating: number;
		text: string;
		snippet: string;
		textLanguage: string;
		date: string;
	};
}

export type CanaryProps = {
	bizDetailsPageProps: BizDetailsPageProps;
};

export type BizDetailsPageProps = {
	adUnitsAboveReviewProps: null;
	adUnitsBelowReviewProps: null;
	adUnitsSidebarProps: null;
	autoOpeningMessagingModalProps: AutoOpeningMessagingModalProps;
	bizDiscoveryTopPitchProps: null;
	bizPortfolioProps: null;
	bizQuestionsProps: null;
	businessAlertProps: null;
	businessId: BusinessID;
	businessIsAdvertiser: boolean;
	businessName: BusinessName;
	businessPostsCarouselProps: BusinessPostsCarouselProps;
	callToActionProps: CallToActionProps;
	conversationWidgetProps: null;
	checkInOfferProps: null;
	cityPageAlias: string;
	collectionCardCarouselProps: CollectionCardCarouselProps;
	consumerAlertProps: null;
	dealProps: null;
	facebookCustomAudienceProps: FacebookCustomAudienceProps;
	featurePlacements: FeaturePlacements;
	forceGermanLegalText: boolean;
	forceSsr: boolean;
	fromTheBusinessProps: FromTheBusinessProps | null;
	fullscreenPitchProps: null;
	giftCertificateProps: null;
	healthDataProps: null;
	interfaceLanguageCode: InterfaceLanguageCode;
	interfaceLocaleCode: string;
	isContentfulLayout: boolean;
	isStickySidebarEnabled: boolean;
	maternityDataProps: null;
	messageWidgetProps: null;
	offerCampaignCarouselProps: null;
	openMtbComposerOnLoad: null;
	platformWidgetPropsList: any[];
	realtorDataProps: null;
	relatedBusinessesCarouselProps: RelatedBusinessesCarouselProps;
	reservationWidgetProps: null;
	requestAPhonecallWidgetProps: null;
	reviewFeedQueryProps: ReviewFeedQueryProps;
	seoLinksProps: SEOLinksProps;
	serviceOfferingsProps: null;
	showPartnerAttribution: boolean;
	signupNudgeProps: null;
	sponsoredBusinessHighlightsProps: SponsoredBusinessHighlightsProps;
	staticReviewFeedProps: StaticReviewFeedProps;
	surveyQuestionsInlineProps: null;
	surveyQuestionsModalProps: null;
	waitlistWidgetProps: null;
	yelpGuaranteedProps: null;
};

export type AutoOpeningMessagingModalProps = {
	iframeUrls: IframeUrls;
};

export type IframeUrls = {
	mtb_search_ad: string;
	mtb_landing_page: string;
	third_party_deep_link: string;
	mtb_search_action: string;
};

export type BusinessID = string;

export type BusinessName = string;

export type BusinessPostsCarouselProps = {
	businessAvatar: BusinessPostsCarouselPropsBusinessAvatar;
	businessId: BusinessID;
	businessName: BusinessName;
	flagPostCsrftok: string;
	insertPostInteractionCsrftok: string;
	deletePostInteractionCsrftok: string;
	posts: any[];
	currentUserId: null;
	isQueryPostActive: boolean;
	queryPostId: null;
	querySource: null;
	showLikeFeature: boolean;
};

export type BusinessPostsCarouselPropsBusinessAvatar = {
	bizPhoto: null;
	id: string;
	urlPrefix: string;
	urlSuffix: string;
};

export type CallToActionProps = {
	businessId: BusinessID;
	currentUserId: null;
};

export type CollectionCardCarouselProps = {
	collections: Collection[];
};

export type Collection = {
	url: string;
	itemCount: number;
	name: string;
	owner: CollectionOwner;
	photos: CollectionPhoto[];
};

export type CollectionOwner = {
	displayName: string;
};

export type CollectionPhoto = {
	sourceUrl: string;
};

export type FacebookCustomAudienceProps = {
	isLive: boolean;
	url: string;
};

export type FeaturePlacements = {
	adUnitsAboveReview: number;
	fromTheBusiness: number;
	mediaShowcase: number;
	surveyQuestions: number;
};

export type FromTheBusinessProps = {
	fromTheBusinessContentProps: FromTheBusinessContentProps;
	reportUrl: string;
	showExpanded: boolean;
};

export type FromTheBusinessContentProps = {
	businessName: BusinessName;
	historyText: null;
	specialtiesText: string;
	yearEstablished: null;
	businessOwner: null;
	businessOwnerBio: null;
	recommendedBusinesses: any[];
};

export type InterfaceLanguageCode = string;

export type RelatedBusinessesCarouselProps = {
	relatedBusinesses: RelatedBusiness[];
};

export type RelatedBusiness = {
	categories: Category[];
	name: string;
	rating: number;
	reviewCount: number;
	businessUrl: string;
	currencySymbol: CurrencySymbol;
	microformat: boolean;
	photoSrc: string;
	priceRange: number | null;
	showCategoryLinks: boolean;
	showPhoto: boolean;
	showPriceRemainder: boolean;
	showVerifiedLicense: boolean;
};

export type Category = {
	title: string;
	url: string;
};

export type CurrencySymbol = string;

export type ReviewFeedQueryProps = {
	filters: Filters;
	reviewLanguages: ReviewLanguage[];
	pagination: Pagination;
	reviews: Review[];
};

export type Filters = {
	languageCode: InterfaceLanguageCode;
	query: string;
	sortType: string;
};

export type Pagination = {
	resultsPerPage: number;
	startResult: number;
	totalResults: number;
};

export type ReviewLanguage = {
	code: string;
	count: number;
};

export type Review = {
	id: string;
	userId: string;
	business: Business;
	user: ReviewUser;
	comment: Comment;
	localizedDate: string;
	localizedDateVisited: null;
	rating: number;
	photos: ReviewPhoto[];
	lightboxMediaItems: LightboxMediaItem[];
	photosUrl: string;
	totalPhotos: number;
	feedback: Feedback;
	isUpdated: boolean;
	businessOwnerReplies: BusinessOwnerReply[];
	appreciatedBy: null;
	previousReviews: null;
	tags: Tag[];
};

export type Business = {
	id: BusinessID;
	alias: Alias;
	name: BusinessName;
	photoSrc?: string;
};

export type Alias = string;

export type BusinessOwnerReply = {
	id: string;
	comment: string;
	owner: BusinessOwnerReplyOwner;
	localizedDate: string;
};

export type BusinessOwnerReplyOwner = {
	id: ID;
	avatarSrc: string;
	avatarSrcSet: string;
	displayName: DisplayName;
	role: Role;
};

export type DisplayName = string;

export type ID = string;

export type Role = string;

export type Comment = {
	text: string;
	language: InterfaceLanguageCode;
};

export type Feedback = {
	counts: Counts;
	userFeedback: UserFeedback;
	voterText: null;
};

export type Counts = {
	useful: number;
	funny: number;
	cool: number;
};

export type UserFeedback = {
	useful: boolean;
	funny: boolean;
	cool: boolean;
};

export type LightboxMediaItem = {
	business: Business;
	businessAvatar: LightboxMediaItemBusinessAvatar;
	caption: null | string;
	helpfulCount: number;
	id: string;
	timeUploaded: string;
	type: Type;
	url: string;
	user: LightboxMediaItemUser;
	userVote: UserVote;
};

export type LightboxMediaItemBusinessAvatar = {
	altText: BusinessName;
	height: number;
	src: string;
	srcSet: string;
	url: URL;
	width: number;
};

export type URL = string;

export type Type = string;

export type LightboxMediaItemUser = {
	avatar: Avatar;
	displayName: string;
	eliteYear: number | null;
	friendCount: number;
	id: string;
	isCurrentlyElite: boolean;
	reviewCount: number;
	url: string;
};

export type Avatar = {
	linkUrl: string;
	srcUrl: string;
	srcSetUrl: string;
};

export type UserVote = string;

export type ReviewPhoto = {
	src: string;
	link: string;
	altText: string;
	width: number;
	height: number;
	caption: null | string;
};

export type Tag = {
	label: string;
	title: null;
	href: string;
	iconName: IconName;
	iconColor: string;
};

export type IconName = string;

export type ReviewUser = {
	link: string;
	src: string;
	srcSet: string;
	markupDisplayName: string;
	displayLocation: DisplayLocation;
	altText: string;
	userUrl: string;
	partnerAlias: null;
	friendCount: number;
	photoCount: number;
	reviewCount: number;
	eliteYear: number | null;
};

export type DisplayLocation = string;

export type SEOLinksProps = {
	cityPageLinks: Links;
	nearbyLinks: Links;
	nearbySearchInternalLinks: Links;
	nearMeSearchInternalLinks: Links;
	relatedResourceArticleLinks: null;
	relatedSearchesLinks: Links;
	servicesHubPageInternalLinks: null;
	serviceOfferingsLinks: null;
	transactionSearchLinks: Links;
};

export type Links = {
	heading: string;
	links: Link[];
};

export type Link = {
	href: string;
	label: string;
	icon: null | string;
};

export type SponsoredBusinessHighlightsProps = {
	bizSiteUrl: string;
	businessHighlights: BusinessHighlight[];
	alternateHeadingStyle: boolean;
};

export type BusinessHighlight = {
	title: string;
	id: string;
	bizPageIconName: string;
	bizPageIconV2Name: string;
	group: Group;
	iconName: string;
};

export type Group = {};

export type StaticReviewFeedProps = {
	bizSiteDomain: string;
	businessId: BusinessID;
	csrfTokens: CSRFTokens;
	currentUserFollows: any[];
	currentUserId: null;
	currentUserIsBizOwner: boolean;
	dateOfExperienceBannerProps: null;
	interfaceLanguageCode: InterfaceLanguageCode;
	photoFlagReasons: FlagReason[];
	reviewFeedbackUrl: string;
	reviewLanguageToLoad: null;
	reviewFlagReasons: FlagReason[];
	reviewRemovalReasons: ReviewRemovalReason[];
	selectedReviewId: null;
	unconfirmedReview: null;
	writeAReviewWidgetProps: WriteAReviewWidgetProps;
};

export type CSRFTokens = {
	bizPhotos: string;
	compliment: string;
	flagContent: string;
	removeReview: string;
	reviewFeedback: string;
	sendMessage: string;
	userFollow: string;
	searchForFriends: string;
	sendToFriend: string;
};

export type FlagReason = {
	code: string;
	description: string;
};

export type ReviewRemovalReason = {
	description: string;
	explanation: string;
	name: string;
};

export type WriteAReviewWidgetProps = {
	isFTR: boolean;
	message: string;
	reviewDraft: null;
	user: null;
	warUrl: string;
};
